name: CI/CD

on:
  schedule:
    - cron: 0 12 * * 0

  push:
    branches: [main]
    tags: [v*.*.*]

  pull_request:
    branches: [main]

env:
  python-version: 3.10.2
  cosign-version: 1.5.2

permissions:
  contents: read

jobs:
  lint:
    name: Run linters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: Restore cached Poetry installation
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: ${{ runner.os }}-poetry

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Restore cached Poetry virtualenv
        id: restore-cached-poetry-virtualenv
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-${{ env.python-version }}-virtualenv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-${{ env.python-version }}-virtualenv-

      - name: Install dependencies
        if: steps.restore-cached-poetry-virtualenv.outputs.cache-hit != 'true'
        working-directory: ${{ env.working-directory }}
        run: |
          poetry install --no-interaction

      - name: Run Pylint
        run: |
          poetry run pylint --fail-under 9 speny tests

  test:
    name: Run tests
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: Restore cached poetry installation
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: ${{ runner.os }}-poetry

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Restore cached Poetry virtualenv
        id: restore-cached-poetry-virtualenv
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-${{ env.python-version }}-virtualenv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-${{ env.python-version }}-virtualenv-

      - name: Install dependencies
        if: steps.restore-cached-poetry-virtualenv.outputs.cache-hit != 'true'
        working-directory: ${{ env.working-directory }}
        run: |
          poetry install --no-interaction

      - name: Run pytest
        run: |
          poetry run pytest --cov=speny --cov=tests

  build:
    name: Build${{ github.event_name != 'pull_request' && ' ' || ' and publish ' }}Docker image
    needs: [lint, test]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Setup cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v2.0.0
        with:
          cosign-release: v${{ env.cosign-version }}

      - name: Login against ${{ env.registry }} registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Extract Docker metadata
        id: extract-docker-metadata
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.registry }}/${{ env.image }}

      - name: Build${{ github.event_name != 'pull_request' && ' ' || ' and push ' }}Docker image
        id: build-and-push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.extract-docker-metadata.outputs.tags }}
          labels: ${{ steps.extract-docker-metadata.outputs.labels }}

      - name: Sign published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign ${{ steps.extract-docker-metadata.outputs.tags }}
